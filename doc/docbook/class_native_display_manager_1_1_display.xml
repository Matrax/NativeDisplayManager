<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_native_display_manager_1_1_display" xml:lang="en-US">
<title>NativeDisplayManager::Display Class Reference</title>
<indexterm><primary>NativeDisplayManager::Display</primary></indexterm>
<para>

<para>There is no default implementation of this class, some methods need to be defined in an other class for each systems, also, some methods are shared by all the OS and are already defined in this header. </para>
 
</para>
<para>
<computeroutput>#include &lt;display.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_native_display_manager_1_1_display_a4cd7d842644296a04e13e128b7c7f349_1a4cd7d842644296a04e13e128b7c7f349">Display</link> ()</para>

<para>Constructor of this class. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_native_display_manager_1_1_display_1a4319cd1e3c3ef469119ed7da57f5b60b"/><emphasis role="strong">Display</emphasis> (<link linkend="_class_native_display_manager_1_1_display">Display</link> &amp;)=delete</para>

<para>No copy constructor. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_native_display_manager_1_1_display_1a4cc9c3270443f3577cf8969eea4e5ccf"/><emphasis role="strong">Display</emphasis> (const <link linkend="_class_native_display_manager_1_1_display">Display</link> &amp;)=delete</para>

<para>No copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_class_native_display_manager_1_1_display_a70df3bb748a7057c496aa10152f39b23_1a70df3bb748a7057c496aa10152f39b23">~Display</link> ()</para>

<para>Destructor of this class. </para>
</listitem>
            <listitem><para><link linkend="_struct_native_display_manager_1_1_display_events">DisplayEvents</link> &amp; <link linkend="_class_native_display_manager_1_1_display_aff2fd3b39135ce1211d25925af7f6fd1_1aff2fd3b39135ce1211d25925af7f6fd1">CatchEvents</link> () noexcept</para>

<para>This method must return all the events catched. </para>
</listitem>
            <listitem><para><link linkend="_struct_native_display_manager_1_1_display_events">DisplayEvents</link> &amp; <link linkend="_class_native_display_manager_1_1_display_afa0f4be91466ef2cef8e12906664faa5_1afa0f4be91466ef2cef8e12906664faa5">GetEvents</link> () noexcept</para>

<para>This method return the internal events struct. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a8fee8d5c3bd59173542da741a100ec9f_1a8fee8d5c3bd59173542da741a100ec9f">Load</link> (const std::string_view title, const int width, const int height, const bool visible=false)</para>

<para>This method load the display. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a4c52a2b884c0b06afcb720a50735cf96_1a4c52a2b884c0b06afcb720a50735cf96">Unload</link> ()</para>

<para>This method unload the display by releasing all the associated resources. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_aac260aaf17e6840c8115ca5a8feb18c7_1aac260aaf17e6840c8115ca5a8feb18c7">SetFullScreen</link> (const bool fullscreen)</para>

<para>This method set the display on full screen mode or not. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_aa9f1afd15d8e889c6a3aab7701acc695_1aa9f1afd15d8e889c6a3aab7701acc695">SwapFrontAndBack</link> (const int swap_interval) const noexcept</para>

<para>This method swap the back and front buffer of the display if the display used double buffering. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_aeeb46ab1545f1ed854eeebc83ce13388_1aeeb46ab1545f1ed854eeebc83ce13388">MakeOldOpenGLContext</link> (const bool double_buffer, const int color_bits, const int depth_bits, const int stencil_bits)</para>

<para>This method create an OpenGL context in an old way. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a0946a103227630284d23e14c297c3058_1a0946a103227630284d23e14c297c3058">MakeOpenGLContext</link> (const int major_version, const int minor_version, const bool double_buffer, const int color_bits, const int alpha_bits, const int depth_bits, const int stencil_bits, const bool samples_buffers, const int samples)</para>

<para>This method create an OpenGL context. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a5af22307e0d39325ac1de0ea7ae39ce9_1a5af22307e0d39325ac1de0ea7ae39ce9">DeleteOpenGLContext</link> () const</para>

<para>This method delete the current OpenGL context. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a82c5ba98fe6191b918a51b80b0457229_1a82c5ba98fe6191b918a51b80b0457229">SetTitle</link> (const std::string_view title)</para>

<para>This method set the title of the display. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a181be870f1f01e73e13f6692e2cdb55a_1a181be870f1f01e73e13f6692e2cdb55a">SetCursorPosition</link> (const unsigned long x, const unsigned long y)</para>

<para>This method set the cursor position on the display. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_aeadb585297797bf7dce9b239bf306604_1aeadb585297797bf7dce9b239bf306604">SetCursorPositionToCenter</link> ()</para>

<para>This method set the cursor position on the center of the display. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_af4db0812a7c408f951c49783463491eb_1af4db0812a7c408f951c49783463491eb">SetCursorVisible</link> (const bool visible)</para>

<para>This method set the visibility of the cursor on the display. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_aa4470000e565cf3340108e85e715cffa_1aa4470000e565cf3340108e85e715cffa">SetVisible</link> (const bool visible)</para>

<para>This method set the visibility of the display. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_adaf64238a91cb2d0dca46c51df2cf298_1adaf64238a91cb2d0dca46c51df2cf298">Close</link> () const</para>

<para>This method destroy the display on the screen. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a60c059722792d1bd7d16a3e4a5d2cc93_1a60c059722792d1bd7d16a3e4a5d2cc93">SetX</link> (const int x)</para>

<para>This method set the display x position on the screen. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a8fb12f5458845b50d3cbe45b3a31201f_1a8fb12f5458845b50d3cbe45b3a31201f">SetY</link> (const int y)</para>

<para>This method set the display y position on the screen. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_ad7af4c4009ef8d5b78f508898889877e_1ad7af4c4009ef8d5b78f508898889877e">SetWidth</link> (const int width)</para>

<para>This method set the display width. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_adaa971578cda69306f585a92476ba955_1adaa971578cda69306f585a92476ba955">SetHeight</link> (const int height)</para>

<para>This method set the display height. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_native_display_manager_1_1_display_abe318112a787dde66f3bfe4a05416435_1abe318112a787dde66f3bfe4a05416435">HasFocus</link> () const</para>

<para>This method check if the display has the focus (if the display is on the top). </para>
</listitem>
            <listitem><para>int <link linkend="_class_native_display_manager_1_1_display_abadb1acf0efbdafdf942cf247d67fa55_1abadb1acf0efbdafdf942cf247d67fa55">GetX</link> () const</para>

<para>This method get the x position of the display on the screen. </para>
</listitem>
            <listitem><para>int <link linkend="_class_native_display_manager_1_1_display_adecb43bc1a19cf59d08096c68ef63b1d_1adecb43bc1a19cf59d08096c68ef63b1d">GetY</link> () const</para>

<para>This method get the y position of the display on the screen. </para>
</listitem>
            <listitem><para>int <link linkend="_class_native_display_manager_1_1_display_affc8751be206a4d481d57e3e8a570e89_1affc8751be206a4d481d57e3e8a570e89">GetWidth</link> () const</para>

<para>This method get the width of the display. </para>
</listitem>
            <listitem><para>int <link linkend="_class_native_display_manager_1_1_display_a60c77c5d34b5cc57970fce11abbe8fbe_1a60c77c5d34b5cc57970fce11abbe8fbe">GetHeight</link> () const</para>

<para>This method get the height of the display. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_native_display_manager_1_1_display_af58b9fdfb1d0ffa3d9336dd79c15272b_1af58b9fdfb1d0ffa3d9336dd79c15272b">IsKeyPressed</link> (int virtual_key) const noexcept</para>

<para>This method check if a virtual key is pressed. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_native_display_manager_1_1_display_a53e98852715f558dee5c800c11d71625_1a53e98852715f558dee5c800c11d71625">IsKeyReleased</link> (int virtual_key) const noexcept</para>

<para>This method check if a virtual key is released. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_a5cc94280f5844260a45e75b638d26431_1a5cc94280f5844260a45e75b638d26431">AddKeyPressed</link> (int virtual_key)</para>

<para>This method add a key pressed in the events struct, it also removed the same key from the keys released. </para>
</listitem>
            <listitem><para>void <link linkend="_class_native_display_manager_1_1_display_ae7b968b5acf3be8f976c90e5564c6a6c_1ae7b968b5acf3be8f976c90e5564c6a6c">AddKeyReleased</link> (int virtual_key)</para>

<para>This method add a key released in the events struct, it also removed the same key from the keys pressed. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>There is no default implementation of this class, some methods need to be defined in an other class for each systems, also, some methods are shared by all the OS and are already defined in this header. </para>



<para>Each implementation can set attributes or methods in this class but can be only compiled with these, also this library is designed to report error mainly with exceptions. Here the list of all implementation :<itemizedlist>
<listitem>
<para>win32_display_impl.cpp -&gt; implements the Win32 (x32 or x64) version. </para>
</listitem></itemizedlist>
</para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00056">56</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_native_display_manager_1_1_display_a4cd7d842644296a04e13e128b7c7f349_1a4cd7d842644296a04e13e128b7c7f349"/><section>
    <title>Display()</title>
<indexterm><primary>Display</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>Display</secondary></indexterm>
<para><computeroutput>NativeDisplayManager::Display::Display ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor of this class. </para>
</para>

<para>This class is a singleton so if a display already exist, an exception is thrown. If not, the global instance is set. </para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00080">80</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a70df3bb748a7057c496aa10152f39b23_1a70df3bb748a7057c496aa10152f39b23"/><section>
    <title>~Display()</title>
<indexterm><primary>~Display</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>~Display</secondary></indexterm>
<para><computeroutput>NativeDisplayManager::Display::~Display ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destructor of this class. </para>
</para>

<para>If the display is loaded, the destructor unload the display, and then release the global instance. </para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00096">96</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_native_display_manager_1_1_display_a5cc94280f5844260a45e75b638d26431_1a5cc94280f5844260a45e75b638d26431"/><section>
    <title>AddKeyPressed()</title>
<indexterm><primary>AddKeyPressed</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>AddKeyPressed</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::AddKeyPressed (int virtual_key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>This method add a key pressed in the events struct, it also removed the same key from the keys released. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>virtual_key</entry><entry>
<para>The virtual key to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00319">319</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_ae7b968b5acf3be8f976c90e5564c6a6c_1ae7b968b5acf3be8f976c90e5564c6a6c"/><section>
    <title>AddKeyReleased()</title>
<indexterm><primary>AddKeyReleased</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>AddKeyReleased</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::AddKeyReleased (int virtual_key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>This method add a key released in the events struct, it also removed the same key from the keys pressed. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>virtual_key</entry><entry>
<para>The virtual key to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00357">357</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_aff2fd3b39135ce1211d25925af7f6fd1_1aff2fd3b39135ce1211d25925af7f6fd1"/><section>
    <title>CatchEvents()</title>
<indexterm><primary>CatchEvents</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>CatchEvents</secondary></indexterm>
<para><computeroutput><link linkend="_struct_native_display_manager_1_1_display_events">DisplayEvents</link> &amp; NativeDisplayManager::Display::CatchEvents ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>This method must return all the events catched. </para>
</para>

<para>This method need to be implemented for each OS. <formalpara><title>Returns</title>

<para><link linkend="_struct_native_display_manager_1_1_display_events">DisplayEvents</link>&amp; The events structure </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_adaf64238a91cb2d0dca46c51df2cf298_1adaf64238a91cb2d0dca46c51df2cf298"/><section>
    <title>Close()</title>
<indexterm><primary>Close</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>Close</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::Close ( ) const</computeroutput></para><para>

<para>This method destroy the display on the screen. </para>
</para>

<para>This method need to be implemented for each OS. </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a5af22307e0d39325ac1de0ea7ae39ce9_1a5af22307e0d39325ac1de0ea7ae39ce9"/><section>
    <title>DeleteOpenGLContext()</title>
<indexterm><primary>DeleteOpenGLContext</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>DeleteOpenGLContext</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::DeleteOpenGLContext ( ) const</computeroutput></para><para>

<para>This method delete the current OpenGL context. </para>
</para>

<para>This method need to be implemented for each OS. </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_afa0f4be91466ef2cef8e12906664faa5_1afa0f4be91466ef2cef8e12906664faa5"/><section>
    <title>GetEvents()</title>
<indexterm><primary>GetEvents</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>GetEvents</secondary></indexterm>
<para><computeroutput><link linkend="_struct_native_display_manager_1_1_display_events">DisplayEvents</link> &amp; NativeDisplayManager::Display::GetEvents ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>This method return the internal events struct. </para>
</para>

<para><formalpara><title>Returns</title>

<para><link linkend="_struct_native_display_manager_1_1_display_events">DisplayEvents</link>&amp; The events structure </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00113">113</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a60c77c5d34b5cc57970fce11abbe8fbe_1a60c77c5d34b5cc57970fce11abbe8fbe"/><section>
    <title>GetHeight()</title>
<indexterm><primary>GetHeight</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>GetHeight</secondary></indexterm>
<para><computeroutput>int NativeDisplayManager::Display::GetHeight ( ) const</computeroutput></para><para>

<para>This method get the height of the display. </para>
</para>

<para>This method need to be implemented for each OS. <formalpara><title>Returns</title>

<para>The height position of the display. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_affc8751be206a4d481d57e3e8a570e89_1affc8751be206a4d481d57e3e8a570e89"/><section>
    <title>GetWidth()</title>
<indexterm><primary>GetWidth</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>GetWidth</secondary></indexterm>
<para><computeroutput>int NativeDisplayManager::Display::GetWidth ( ) const</computeroutput></para><para>

<para>This method get the width of the display. </para>
</para>

<para>This method need to be implemented for each OS. <formalpara><title>Returns</title>

<para>The width position of the display. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_abadb1acf0efbdafdf942cf247d67fa55_1abadb1acf0efbdafdf942cf247d67fa55"/><section>
    <title>GetX()</title>
<indexterm><primary>GetX</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>GetX</secondary></indexterm>
<para><computeroutput>int NativeDisplayManager::Display::GetX ( ) const</computeroutput></para><para>

<para>This method get the x position of the display on the screen. </para>
</para>

<para>This method need to be implemented for each OS. <formalpara><title>Returns</title>

<para>The x position of the display on the screen. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_adecb43bc1a19cf59d08096c68ef63b1d_1adecb43bc1a19cf59d08096c68ef63b1d"/><section>
    <title>GetY()</title>
<indexterm><primary>GetY</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>GetY</secondary></indexterm>
<para><computeroutput>int NativeDisplayManager::Display::GetY ( ) const</computeroutput></para><para>

<para>This method get the y position of the display on the screen. </para>
</para>

<para>This method need to be implemented for each OS. <formalpara><title>Returns</title>

<para>The y position of the display on the screen. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_abe318112a787dde66f3bfe4a05416435_1abe318112a787dde66f3bfe4a05416435"/><section>
    <title>HasFocus()</title>
<indexterm><primary>HasFocus</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>HasFocus</secondary></indexterm>
<para><computeroutput>bool NativeDisplayManager::Display::HasFocus ( ) const</computeroutput></para><para>

<para>This method check if the display has the focus (if the display is on the top). </para>
</para>

<para>This method need to be implemented for each OS. <formalpara><title>Returns</title>

<para>If the window has the focus. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_af58b9fdfb1d0ffa3d9336dd79c15272b_1af58b9fdfb1d0ffa3d9336dd79c15272b"/><section>
    <title>IsKeyPressed()</title>
<indexterm><primary>IsKeyPressed</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>IsKeyPressed</secondary></indexterm>
<para><computeroutput>bool NativeDisplayManager::Display::IsKeyPressed (int virtual_key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>This method check if a virtual key is pressed. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>virtual_key</entry><entry>
<para>The virtual key to check. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00289">289</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a53e98852715f558dee5c800c11d71625_1a53e98852715f558dee5c800c11d71625"/><section>
    <title>IsKeyReleased()</title>
<indexterm><primary>IsKeyReleased</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>IsKeyReleased</secondary></indexterm>
<para><computeroutput>bool NativeDisplayManager::Display::IsKeyReleased (int virtual_key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>This method check if a virtual key is released. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>virtual_key</entry><entry>
<para>The virtual key to check. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_display_8hpp_source_1l00304">304</link> of file <link linkend="_display_8hpp_source">display.hpp</link>.</para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a8fee8d5c3bd59173542da741a100ec9f_1a8fee8d5c3bd59173542da741a100ec9f"/><section>
    <title>Load()</title>
<indexterm><primary>Load</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>Load</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::Load (const std::string_view title, const int width, const int height, const bool visible = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>This method load the display. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>title</entry><entry>
<para>The title of the display. </para>
</entry>
                            </row>
                            <row>
<entry>width</entry><entry>
<para>The width of the display on the screen. </para>
</entry>
                            </row>
                            <row>
<entry>height</entry><entry>
<para>The height of the display on the screen. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_aeeb46ab1545f1ed854eeebc83ce13388_1aeeb46ab1545f1ed854eeebc83ce13388"/><section>
    <title>MakeOldOpenGLContext()</title>
<indexterm><primary>MakeOldOpenGLContext</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>MakeOldOpenGLContext</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::MakeOldOpenGLContext (const bool double_buffer, const int color_bits, const int depth_bits, const int stencil_bits)</computeroutput></para><para>

<para>This method create an OpenGL context in an old way. </para>
</para>

<para>If the creation of the OpenGL context cannot be done, an exception is thrown. This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>double_buffer</entry><entry>
<para>Use double buffering. </para>
</entry>
                            </row>
                            <row>
<entry>color_bits</entry><entry>
<para>Number of bits to represent a color on the color buffer. </para>
</entry>
                            </row>
                            <row>
<entry>depth_bits</entry><entry>
<para>Number of bits to represent a data on the depth buffer. </para>
</entry>
                            </row>
                            <row>
<entry>depth_bits</entry><entry>
<para>Number of bits to represent a data on the stencil buffer. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a0946a103227630284d23e14c297c3058_1a0946a103227630284d23e14c297c3058"/><section>
    <title>MakeOpenGLContext()</title>
<indexterm><primary>MakeOpenGLContext</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>MakeOpenGLContext</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::MakeOpenGLContext (const int major_version, const int minor_version, const bool double_buffer, const int color_bits, const int alpha_bits, const int depth_bits, const int stencil_bits, const bool samples_buffers, const int samples)</computeroutput></para><para>

<para>This method create an OpenGL context. </para>
</para>

<para>If the creation of the OpenGL context cannot be done, an exception is thrown. This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>major_version</entry><entry>
<para>The OpenGL context major version to load. </para>
</entry>
                            </row>
                            <row>
<entry>minor_version</entry><entry>
<para>The OpenGL context minor version to load. </para>
</entry>
                            </row>
                            <row>
<entry>double_buffer</entry><entry>
<para>Use double buffering. </para>
</entry>
                            </row>
                            <row>
<entry>color_bits</entry><entry>
<para>Number of bits to represent a color on the color buffer. </para>
</entry>
                            </row>
                            <row>
<entry>alpha_bits</entry><entry>
<para>Number of bits to represent the alpha channel on the color buffer. </para>
</entry>
                            </row>
                            <row>
<entry>depth_bits</entry><entry>
<para>Number of bits to represent a data on the depth buffer. </para>
</entry>
                            </row>
                            <row>
<entry>stencil_bits</entry><entry>
<para>Number of bits to represent a data on the stencil buffer. </para>
</entry>
                            </row>
                            <row>
<entry>samples_buffers</entry><entry>
<para>Use samples in the buffers. </para>
</entry>
                            </row>
                            <row>
<entry>samples</entry><entry>
<para>Number of samples. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a181be870f1f01e73e13f6692e2cdb55a_1a181be870f1f01e73e13f6692e2cdb55a"/><section>
    <title>SetCursorPosition()</title>
<indexterm><primary>SetCursorPosition</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetCursorPosition</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetCursorPosition (const unsigned long x, const unsigned long y)</computeroutput></para><para>

<para>This method set the cursor position on the display. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para>The x position of the cursor on the screen. </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>The y position of the cursor on the screen. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_aeadb585297797bf7dce9b239bf306604_1aeadb585297797bf7dce9b239bf306604"/><section>
    <title>SetCursorPositionToCenter()</title>
<indexterm><primary>SetCursorPositionToCenter</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetCursorPositionToCenter</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetCursorPositionToCenter ( )</computeroutput></para><para>

<para>This method set the cursor position on the center of the display. </para>
</para>

<para>This method need to be implemented for each OS. </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_af4db0812a7c408f951c49783463491eb_1af4db0812a7c408f951c49783463491eb"/><section>
    <title>SetCursorVisible()</title>
<indexterm><primary>SetCursorVisible</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetCursorVisible</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetCursorVisible (const bool visible)</computeroutput></para><para>

<para>This method set the visibility of the cursor on the display. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>visible</entry><entry>
<para>The visibility of the cursor. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_aac260aaf17e6840c8115ca5a8feb18c7_1aac260aaf17e6840c8115ca5a8feb18c7"/><section>
    <title>SetFullScreen()</title>
<indexterm><primary>SetFullScreen</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetFullScreen</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetFullScreen (const bool fullscreen)</computeroutput></para><para>

<para>This method set the display on full screen mode or not. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fullscreen</entry><entry>
<para>If the full screen mode is activated or not. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_adaa971578cda69306f585a92476ba955_1adaa971578cda69306f585a92476ba955"/><section>
    <title>SetHeight()</title>
<indexterm><primary>SetHeight</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetHeight</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetHeight (const int height)</computeroutput></para><para>

<para>This method set the display height. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>height</entry><entry>
<para>The height of the display </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a82c5ba98fe6191b918a51b80b0457229_1a82c5ba98fe6191b918a51b80b0457229"/><section>
    <title>SetTitle()</title>
<indexterm><primary>SetTitle</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetTitle</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetTitle (const std::string_view title)</computeroutput></para><para>

<para>This method set the title of the display. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>title</entry><entry>
<para>The new title of the display. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_aa4470000e565cf3340108e85e715cffa_1aa4470000e565cf3340108e85e715cffa"/><section>
    <title>SetVisible()</title>
<indexterm><primary>SetVisible</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetVisible</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetVisible (const bool visible)</computeroutput></para><para>

<para>This method set the visibility of the display. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>visible</entry><entry>
<para>The visibility of the display. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_ad7af4c4009ef8d5b78f508898889877e_1ad7af4c4009ef8d5b78f508898889877e"/><section>
    <title>SetWidth()</title>
<indexterm><primary>SetWidth</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetWidth</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetWidth (const int width)</computeroutput></para><para>

<para>This method set the display width. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>width</entry><entry>
<para>The width of the display </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a60c059722792d1bd7d16a3e4a5d2cc93_1a60c059722792d1bd7d16a3e4a5d2cc93"/><section>
    <title>SetX()</title>
<indexterm><primary>SetX</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetX</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetX (const int x)</computeroutput></para><para>

<para>This method set the display x position on the screen. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para>The x position </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a8fb12f5458845b50d3cbe45b3a31201f_1a8fb12f5458845b50d3cbe45b3a31201f"/><section>
    <title>SetY()</title>
<indexterm><primary>SetY</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SetY</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SetY (const int y)</computeroutput></para><para>

<para>This method set the display y position on the screen. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>y</entry><entry>
<para>The y display </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_aa9f1afd15d8e889c6a3aab7701acc695_1aa9f1afd15d8e889c6a3aab7701acc695"/><section>
    <title>SwapFrontAndBack()</title>
<indexterm><primary>SwapFrontAndBack</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>SwapFrontAndBack</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::SwapFrontAndBack (const int swap_interval) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>This method swap the back and front buffer of the display if the display used double buffering. </para>
</para>

<para>This method need to be implemented for each OS. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fullscreen</entry><entry>
<para>The time interval between two swap (0 = no vsync, 1 = vsync). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_native_display_manager_1_1_display_a4c52a2b884c0b06afcb720a50735cf96_1a4c52a2b884c0b06afcb720a50735cf96"/><section>
    <title>Unload()</title>
<indexterm><primary>Unload</primary><secondary>NativeDisplayManager::Display</secondary></indexterm>
<indexterm><primary>NativeDisplayManager::Display</primary><secondary>Unload</secondary></indexterm>
<para><computeroutput>void NativeDisplayManager::Display::Unload ( )</computeroutput></para><para>

<para>This method unload the display by releasing all the associated resources. </para>
</para>

<para>This method need to be implemented for each OS. </para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
includes/ndm/display.hpp</section>
</section>
