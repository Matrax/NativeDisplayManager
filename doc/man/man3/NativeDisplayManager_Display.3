.TH "NativeDisplayManager::Display" 3 "Version 1.0" "NativeDisplayManager" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NativeDisplayManager::Display \- There is no default implementation of this class, some methods need to be defined in an other class for each systems, also, some methods are shared by all the OS and are already defined in this header\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <display\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDisplay\fP ()"
.br
.RI "Constructor of this class\&. "
.ti -1c
.RI "\fBDisplay\fP (\fBDisplay\fP &)=delete"
.br
.RI "No copy constructor\&. "
.ti -1c
.RI "\fBDisplay\fP (const \fBDisplay\fP &)=delete"
.br
.RI "No copy constructor\&. "
.ti -1c
.RI "\fB~Display\fP ()"
.br
.RI "Destructor of this class\&. "
.ti -1c
.RI "\fBDisplayEvents\fP & \fBCatchEvents\fP () noexcept"
.br
.RI "This method must return all the events catched\&. "
.ti -1c
.RI "\fBDisplayEvents\fP & \fBGetEvents\fP () noexcept"
.br
.RI "This method return the internal events struct\&. "
.ti -1c
.RI "void \fBLoad\fP (const std::string_view title, const int width, const int height, const bool visible=false)"
.br
.RI "This method load the display\&. "
.ti -1c
.RI "void \fBUnload\fP ()"
.br
.RI "This method unload the display by releasing all the associated resources\&. "
.ti -1c
.RI "void \fBSetFullScreen\fP (const bool fullscreen)"
.br
.RI "This method set the display on full screen mode or not\&. "
.ti -1c
.RI "void \fBSwapFrontAndBack\fP (const int swap_interval) const noexcept"
.br
.RI "This method swap the back and front buffer of the display if the display used double buffering\&. "
.ti -1c
.RI "void \fBMakeOldOpenGLContext\fP (const bool double_buffer, const int color_bits, const int depth_bits, const int stencil_bits)"
.br
.RI "This method create an OpenGL context in an old way\&. "
.ti -1c
.RI "void \fBMakeOpenGLContext\fP (const int major_version, const int minor_version, const bool double_buffer, const int color_bits, const int alpha_bits, const int depth_bits, const int stencil_bits, const bool samples_buffers, const int samples)"
.br
.RI "This method create an OpenGL context\&. "
.ti -1c
.RI "void \fBDeleteOpenGLContext\fP () const"
.br
.RI "This method delete the current OpenGL context\&. "
.ti -1c
.RI "void \fBSetTitle\fP (const std::string_view title)"
.br
.RI "This method set the title of the display\&. "
.ti -1c
.RI "void \fBSetCursorPosition\fP (const unsigned long x, const unsigned long y)"
.br
.RI "This method set the cursor position on the display\&. "
.ti -1c
.RI "void \fBSetCursorPositionToCenter\fP ()"
.br
.RI "This method set the cursor position on the center of the display\&. "
.ti -1c
.RI "void \fBSetCursorVisible\fP (const bool visible)"
.br
.RI "This method set the visibility of the cursor on the display\&. "
.ti -1c
.RI "void \fBSetVisible\fP (const bool visible)"
.br
.RI "This method set the visibility of the display\&. "
.ti -1c
.RI "void \fBClose\fP () const"
.br
.RI "This method destroy the display on the screen\&. "
.ti -1c
.RI "void \fBSetX\fP (const int x)"
.br
.RI "This method set the display x position on the screen\&. "
.ti -1c
.RI "void \fBSetY\fP (const int y)"
.br
.RI "This method set the display y position on the screen\&. "
.ti -1c
.RI "void \fBSetWidth\fP (const int width)"
.br
.RI "This method set the display width\&. "
.ti -1c
.RI "void \fBSetHeight\fP (const int height)"
.br
.RI "This method set the display height\&. "
.ti -1c
.RI "bool \fBHasFocus\fP () const"
.br
.RI "This method check if the display has the focus (if the display is on the top)\&. "
.ti -1c
.RI "int \fBGetX\fP () const"
.br
.RI "This method get the x position of the display on the screen\&. "
.ti -1c
.RI "int \fBGetY\fP () const"
.br
.RI "This method get the y position of the display on the screen\&. "
.ti -1c
.RI "int \fBGetWidth\fP () const"
.br
.RI "This method get the width of the display\&. "
.ti -1c
.RI "int \fBGetHeight\fP () const"
.br
.RI "This method get the height of the display\&. "
.ti -1c
.RI "bool \fBIsKeyPressed\fP (int virtual_key) const noexcept"
.br
.RI "This method check if a virtual key is pressed\&. "
.ti -1c
.RI "bool \fBIsKeyReleased\fP (int virtual_key) const noexcept"
.br
.RI "This method check if a virtual key is released\&. "
.ti -1c
.RI "void \fBAddKeyPressed\fP (int virtual_key)"
.br
.RI "This method add a key pressed in the events struct, it also removed the same key from the keys released\&. "
.ti -1c
.RI "void \fBAddKeyReleased\fP (int virtual_key)"
.br
.RI "This method add a key released in the events struct, it also removed the same key from the keys pressed\&. "
.in -1c
.SH "Detailed Description"
.PP 
There is no default implementation of this class, some methods need to be defined in an other class for each systems, also, some methods are shared by all the OS and are already defined in this header\&. 

Each implementation can set attributes or methods in this class but can be only compiled with these, also this library is designed to report error mainly with exceptions\&. Here the list of all implementation :
.IP "\(bu" 2
win32_display_impl\&.cpp -> implements the Win32 (x32 or x64) version\&. 
.PP

.PP
Definition at line \fB56\fP of file \fBdisplay\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "NativeDisplayManager::Display::Display ()\fC [inline]\fP"

.PP
Constructor of this class\&. This class is a singleton so if a display already exist, an exception is thrown\&. If not, the global instance is set\&. 
.PP
Definition at line \fB80\fP of file \fBdisplay\&.hpp\fP\&.
.SS "NativeDisplayManager::Display::~Display ()\fC [inline]\fP"

.PP
Destructor of this class\&. If the display is loaded, the destructor unload the display, and then release the global instance\&. 
.PP
Definition at line \fB96\fP of file \fBdisplay\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void NativeDisplayManager::Display::AddKeyPressed (int virtual_key)\fC [inline]\fP"

.PP
This method add a key pressed in the events struct, it also removed the same key from the keys released\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtual_key\fP The virtual key to add\&. 
.RE
.PP

.PP
Definition at line \fB319\fP of file \fBdisplay\&.hpp\fP\&.
.SS "void NativeDisplayManager::Display::AddKeyReleased (int virtual_key)\fC [inline]\fP"

.PP
This method add a key released in the events struct, it also removed the same key from the keys pressed\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtual_key\fP The virtual key to add\&. 
.RE
.PP

.PP
Definition at line \fB357\fP of file \fBdisplay\&.hpp\fP\&.
.SS "\fBDisplayEvents\fP & NativeDisplayManager::Display::CatchEvents ()\fC [noexcept]\fP"

.PP
This method must return all the events catched\&. This method need to be implemented for each OS\&. 
.PP
\fBReturns\fP
.RS 4
\fBDisplayEvents\fP& The events structure 
.RE
.PP

.SS "void NativeDisplayManager::Display::Close () const"

.PP
This method destroy the display on the screen\&. This method need to be implemented for each OS\&. 
.SS "void NativeDisplayManager::Display::DeleteOpenGLContext () const"

.PP
This method delete the current OpenGL context\&. This method need to be implemented for each OS\&. 
.SS "\fBDisplayEvents\fP & NativeDisplayManager::Display::GetEvents ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
This method return the internal events struct\&. 
.PP
\fBReturns\fP
.RS 4
\fBDisplayEvents\fP& The events structure 
.RE
.PP

.PP
Definition at line \fB113\fP of file \fBdisplay\&.hpp\fP\&.
.SS "int NativeDisplayManager::Display::GetHeight () const"

.PP
This method get the height of the display\&. This method need to be implemented for each OS\&. 
.PP
\fBReturns\fP
.RS 4
The height position of the display\&. 
.RE
.PP

.SS "int NativeDisplayManager::Display::GetWidth () const"

.PP
This method get the width of the display\&. This method need to be implemented for each OS\&. 
.PP
\fBReturns\fP
.RS 4
The width position of the display\&. 
.RE
.PP

.SS "int NativeDisplayManager::Display::GetX () const"

.PP
This method get the x position of the display on the screen\&. This method need to be implemented for each OS\&. 
.PP
\fBReturns\fP
.RS 4
The x position of the display on the screen\&. 
.RE
.PP

.SS "int NativeDisplayManager::Display::GetY () const"

.PP
This method get the y position of the display on the screen\&. This method need to be implemented for each OS\&. 
.PP
\fBReturns\fP
.RS 4
The y position of the display on the screen\&. 
.RE
.PP

.SS "bool NativeDisplayManager::Display::HasFocus () const"

.PP
This method check if the display has the focus (if the display is on the top)\&. This method need to be implemented for each OS\&. 
.PP
\fBReturns\fP
.RS 4
If the window has the focus\&. 
.RE
.PP

.SS "bool NativeDisplayManager::Display::IsKeyPressed (int virtual_key) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
This method check if a virtual key is pressed\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtual_key\fP The virtual key to check\&. 
.RE
.PP

.PP
Definition at line \fB289\fP of file \fBdisplay\&.hpp\fP\&.
.SS "bool NativeDisplayManager::Display::IsKeyReleased (int virtual_key) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
This method check if a virtual key is released\&. 
.PP
\fBParameters\fP
.RS 4
\fIvirtual_key\fP The virtual key to check\&. 
.RE
.PP

.PP
Definition at line \fB304\fP of file \fBdisplay\&.hpp\fP\&.
.SS "void NativeDisplayManager::Display::Load (const std::string_view title, const int width, const int height, const bool visible = \fCfalse\fP)"

.PP
This method load the display\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fItitle\fP The title of the display\&. 
.br
\fIwidth\fP The width of the display on the screen\&. 
.br
\fIheight\fP The height of the display on the screen\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::MakeOldOpenGLContext (const bool double_buffer, const int color_bits, const int depth_bits, const int stencil_bits)"

.PP
This method create an OpenGL context in an old way\&. If the creation of the OpenGL context cannot be done, an exception is thrown\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIdouble_buffer\fP Use double buffering\&. 
.br
\fIcolor_bits\fP Number of bits to represent a color on the color buffer\&. 
.br
\fIdepth_bits\fP Number of bits to represent a data on the depth buffer\&. 
.br
\fIdepth_bits\fP Number of bits to represent a data on the stencil buffer\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::MakeOpenGLContext (const int major_version, const int minor_version, const bool double_buffer, const int color_bits, const int alpha_bits, const int depth_bits, const int stencil_bits, const bool samples_buffers, const int samples)"

.PP
This method create an OpenGL context\&. If the creation of the OpenGL context cannot be done, an exception is thrown\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fImajor_version\fP The OpenGL context major version to load\&. 
.br
\fIminor_version\fP The OpenGL context minor version to load\&. 
.br
\fIdouble_buffer\fP Use double buffering\&. 
.br
\fIcolor_bits\fP Number of bits to represent a color on the color buffer\&. 
.br
\fIalpha_bits\fP Number of bits to represent the alpha channel on the color buffer\&. 
.br
\fIdepth_bits\fP Number of bits to represent a data on the depth buffer\&. 
.br
\fIstencil_bits\fP Number of bits to represent a data on the stencil buffer\&. 
.br
\fIsamples_buffers\fP Use samples in the buffers\&. 
.br
\fIsamples\fP Number of samples\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetCursorPosition (const unsigned long x, const unsigned long y)"

.PP
This method set the cursor position on the display\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x position of the cursor on the screen\&. 
.br
\fIy\fP The y position of the cursor on the screen\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetCursorPositionToCenter ()"

.PP
This method set the cursor position on the center of the display\&. This method need to be implemented for each OS\&. 
.SS "void NativeDisplayManager::Display::SetCursorVisible (const bool visible)"

.PP
This method set the visibility of the cursor on the display\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIvisible\fP The visibility of the cursor\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetFullScreen (const bool fullscreen)"

.PP
This method set the display on full screen mode or not\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIfullscreen\fP If the full screen mode is activated or not\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetHeight (const int height)"

.PP
This method set the display height\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIheight\fP The height of the display 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetTitle (const std::string_view title)"

.PP
This method set the title of the display\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fItitle\fP The new title of the display\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetVisible (const bool visible)"

.PP
This method set the visibility of the display\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIvisible\fP The visibility of the display\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetWidth (const int width)"

.PP
This method set the display width\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP The width of the display 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetX (const int x)"

.PP
This method set the display x position on the screen\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x position 
.RE
.PP

.SS "void NativeDisplayManager::Display::SetY (const int y)"

.PP
This method set the display y position on the screen\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIy\fP The y display 
.RE
.PP

.SS "void NativeDisplayManager::Display::SwapFrontAndBack (const int swap_interval) const\fC [noexcept]\fP"

.PP
This method swap the back and front buffer of the display if the display used double buffering\&. This method need to be implemented for each OS\&. 
.PP
\fBParameters\fP
.RS 4
\fIfullscreen\fP The time interval between two swap (0 = no vsync, 1 = vsync)\&. 
.RE
.PP

.SS "void NativeDisplayManager::Display::Unload ()"

.PP
This method unload the display by releasing all the associated resources\&. This method need to be implemented for each OS\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for NativeDisplayManager from the source code\&.
